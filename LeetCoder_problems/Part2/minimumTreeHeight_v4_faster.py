import pdb
import time
from collections import deque
import copy

class Solution(object):
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        start = time.clock()
        tree_heights = {}
        
        edge_dict = {}

        for i in range(n):
            if (i not in edge_dict):
                edge_dict[i] = []
            
            for tupp in edges:
                if (i in tupp):
                    edge_dict[i].append(tupp)
        
        used_dict = {}
        min_height = n

        #calculate tree heights
        for i in range(0,n,1):
            #build a tree first, from perspective of node i
            nodes = {}

            used_dict = {}

            myqueue = deque()
            queue2 = deque()
            height = 1
            myqueue.append(i)
            counter = -1
            level_count = -1

            #create all tree nodes, assign children
            while (len(myqueue) > 0):
                j = myqueue.popleft()
                nodes[j] = []
                
                counter += 1
                used_dict[j] = 1
                
                temp_edges = edge_dict[j]
                
                for tupp in temp_edges:
                    if (j == tupp[0] and tupp[1] not in used_dict):
                        nodes[j].append(tupp[1])
                        myqueue.append(tupp[1])
                        used_dict[tupp[1]] = 1
                    elif (j == tupp[1] and tupp[0] not in used_dict):
                        nodes[j].append(tupp[0])
                        myqueue.append(tupp[0])
                        used_dict[tupp[0]] = 1
                

                #pdb.set_trace()
                if (len(nodes[j]) > 0):
                    queue2.append(len(nodes[j]))
                    # we are on first level
                    if (level_count == -1):
                        level_count = queue2.popleft()
                
                #pdb.set_trace()
                if (counter == level_count):
                    height += 1
                    if (height > min_height):
                        print("exiting loop early!")
                        break
                    counter = 0
                    if (len(queue2) > 0):
                        level_count = sum(queue2)
                        queue2.clear()
            
                #pdb.set_trace()

            #print("i == %d" % i)
            tree_heights[i] = height
            if (height < min_height):
                min_height = height

            #print(i)
            #print(tree_heights[i])
        
        result = []
        
        for k in tree_heights:
            if (tree_heights[k] == min_height):
                result.append(k)
        
        end = time.clock()
        print("time = %f" % ((end - start)*1000))

        return result

def main():
    test = Solution()

    #print(test.findMinHeightTrees(4, [[1,0],[1,2],[1,3]]))

    #print(test.findMinHeightTrees(6, [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]))

    #print(test.findMinHeightTrees(6, [[0,1],[0,2],[0,3],[3,4],[4,5]]))

    #print(test.findMinHeightTrees(210, [[0,1],[1,2],[0,3],[3,4],[4,5],[3,6],[6,7],[7,8],[0,9],[7,10],[6,11],[3,12],[5,13],[8,14],[7,15],[11,16],[12,17],[12,18],[18,19],[7,20],[8,21],[18,22],[7,23],[15,24],[21,25],[14,26],[11,27],[5,28],[15,29],[21,30],[12,31],[22,32],[1,33],[14,34],[14,35],[33,36],[14,37],[18,38],[19,39],[6,40],[29,41],[27,42],[25,43],[0,44],[26,45],[3,46],[1,47],[34,48],[26,49],[9,50],[34,51],[18,52],[41,53],[6,54],[25,55],[55,56],[47,57],[34,58],[58,59],[48,60],[24,61],[43,62],[51,63],[30,64],[24,65],[27,66],[30,67],[41,68],[64,69],[46,70],[49,71],[58,72],[43,73],[24,74],[43,75],[3,76],[32,77],[74,78],[31,79],[59,80],[25,81],[12,82],[26,83],[21,84],[35,85],[37,86],[39,87],[36,88],[67,89],[58,90],[22,91],[91,92],[56,93],[92,94],[3,95],[94,96],[89,97],[81,98],[6,99],[75,100],[56,101],[41,102],[68,103],[46,104],[3,105],[104,106],[56,107],[104,108],[83,109],[9,110],[0,111],[2,112],[53,113],[21,114],[76,115],[34,116],[26,117],[117,118],[116,119],[82,120],[27,121],[101,122],[8,123],[99,124],[79,125],[116,126],[53,127],[46,128],[116,129],[6,130],[46,131],[113,132],[25,133],[79,134],[38,135],[68,136],[116,137],[66,138],[56,139],[102,140],[36,141],[0,142],[126,143],[9,144],[36,145],[34,146],[140,147],[70,148],[117,149],[1,150],[5,151],[38,152],[48,153],[20,154],[145,155],[126,156],[54,157],[21,158],[155,159],[128,160],[34,161],[61,162],[72,163],[64,164],[144,165],[165,166],[60,167],[139,168],[85,169],[133,170],[60,171],[163,172],[120,173],[69,174],[21,175],[84,176],[24,177],[3,178],[131,179],[129,180],[35,181],[159,182],[31,183],[100,184],[110,185],[9,186],[6,187],[149,188],[141,189],[112,190],[22,191],[125,192],[174,193],[19,194],[156,195],[124,196],[88,197],[195,198],[187,199],[164,200],[179,201],[95,202],[48,203],[25,204],[53,205],[13,206],[127,207],[71,208],[119,209]]))

    #print(test.findMinHeightTrees(231, [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[6,8],[3,9],[0,10],[3,11],[5,12],[7,13],[5,14],[8,15],[11,16],[2,17],[10,18],[17,19],[5,20],[14,21],[14,22],[4,23],[0,24],[1,25],[10,26],[24,27],[1,28],[18,29],[18,30],[12,31],[26,32],[10,33],[30,34],[27,35],[7,36],[23,37],[17,38],[37,39],[4,40],[12,41],[1,42],[5,43],[22,44],[35,45],[2,46],[19,47],[28,48],[1,49],[37,50],[1,51],[17,52],[17,53],[44,54],[4,55],[1,56],[19,57],[25,58],[0,59],[58,60],[43,61],[0,62],[59,63],[50,64],[43,65],[7,66],[17,67],[56,68],[25,69],[55,70],[30,71],[30,72],[72,73],[0,74],[14,75],[17,76],[55,77],[66,78],[51,79],[48,80],[20,81],[59,82],[23,83],[12,84],[32,85],[16,86],[17,87],[5,88],[87,89],[33,90],[22,91],[15,92],[0,93],[47,94],[65,95],[88,96],[11,97],[32,98],[38,99],[69,100],[63,101],[15,102],[68,103],[20,104],[94,105],[77,106],[84,107],[81,108],[0,109],[21,110],[4,111],[41,112],[12,113],[97,114],[86,115],[9,116],[27,117],[105,118],[16,119],[16,120],[36,121],[90,122],[61,123],[83,124],[118,125],[45,126],[48,127],[111,128],[49,129],[15,130],[26,131],[2,132],[26,133],[92,134],[132,135],[108,136],[32,137],[0,138],[31,139],[69,140],[68,141],[131,142],[135,143],[108,144],[19,145],[119,146],[118,147],[139,148],[101,149],[67,150],[98,151],[13,152],[132,153],[14,154],[90,155],[85,156],[70,157],[147,158],[113,159],[151,160],[126,161],[62,162],[60,163],[71,164],[98,165],[12,166],[76,167],[151,168],[91,169],[3,170],[90,171],[59,172],[25,173],[104,174],[65,175],[157,176],[151,177],[91,178],[48,179],[116,180],[84,181],[37,182],[162,183],[24,184],[48,185],[44,186],[185,187],[147,188],[118,189],[38,190],[70,191],[155,192],[54,193],[148,194],[120,195],[109,196],[3,197],[12,198],[193,199],[131,200],[25,201],[187,202],[153,203],[170,204],[131,205],[31,206],[182,207],[127,208],[100,209],[146,210],[56,211],[54,212],[147,213],[163,214],[110,215],[190,216],[173,217],[145,218],[187,219],[124,220],[181,221],[85,222],[209,223],[20,224],[215,225],[117,226],[193,227],[226,228],[57,229],[1,230]]))

    #print(test.findMinHeightTrees(404, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100],[100,101],[101,102],[102,103],[103,104],[104,105],[105,106],[106,107],[107,108],[108,109],[109,110],[110,111],[111,112],[112,113],[113,114],[114,115],[115,116],[116,117],[117,118],[118,119],[119,120],[120,121],[121,122],[122,123],[123,124],[124,125],[125,126],[126,127],[127,128],[128,129],[129,130],[130,131],[131,132],[132,133],[133,134],[134,135],[135,136],[136,137],[137,138],[138,139],[139,140],[140,141],[141,142],[142,143],[143,144],[144,145],[145,146],[146,147],[147,148],[148,149],[149,150],[150,151],[151,152],[152,153],[153,154],[154,155],[155,156],[156,157],[157,158],[158,159],[159,160],[160,161],[161,162],[162,163],[163,164],[164,165],[165,166],[166,167],[167,168],[168,169],[169,170],[170,171],[171,172],[172,173],[173,174],[174,175],[175,176],[176,177],[177,178],[178,179],[179,180],[180,181],[181,182],[182,183],[183,184],[184,185],[185,186],[186,187],[187,188],[188,189],[189,190],[190,191],[191,192],[192,193],[193,194],[194,195],[195,196],[196,197],[197,198],[198,199],[199,200],[200,201],[201,202],[202,203],[203,204],[204,205],[205,206],[206,207],[207,208],[208,209],[209,210],[210,211],[211,212],[212,213],[213,214],[214,215],[215,216],[216,217],[217,218],[218,219],[219,220],[220,221],[221,222],[222,223],[223,224],[224,225],[225,226],[226,227],[227,228],[228,229],[229,230],[230,231],[231,232],[232,233],[233,234],[234,235],[235,236],[236,237],[237,238],[238,239],[239,240],[240,241],[241,242],[242,243],[243,244],[244,245],[245,246],[246,247],[247,248],[248,249],[249,250],[250,251],[251,252],[252,253],[253,254],[254,255],[255,256],[256,257],[257,258],[258,259],[259,260],[260,261],[261,262],[262,263],[263,264],[264,265],[265,266],[266,267],[267,268],[268,269],[269,270],[270,271],[271,272],[272,273],[273,274],[274,275],[275,276],[276,277],[277,278],[278,279],[279,280],[280,281],[281,282],[282,283],[283,284],[284,285],[285,286],[286,287],[287,288],[288,289],[289,290],[290,291],[291,292],[292,293],[293,294],[294,295],[295,296],[296,297],[297,298],[298,299],[299,300],[300,301],[301,302],[302,303],[303,304],[304,305],[305,306],[306,307],[307,308],[308,309],[309,310],[310,311],[311,312],[312,313],[313,314],[314,315],[315,316],[316,317],[317,318],[318,319],[319,320],[320,321],[321,322],[322,323],[323,324],[324,325],[325,326],[326,327],[327,328],[328,329],[329,330],[330,331],[331,332],[332,333],[333,334],[334,335],[335,336],[336,337],[337,338],[338,339],[339,340],[340,341],[341,342],[342,343],[343,344],[344,345],[345,346],[346,347],[347,348],[348,349],[349,350],[350,351],[351,352],[352,353],[353,354],[354,355],[355,356],[356,357],[357,358],[358,359],[359,360],[360,361],[361,362],[362,363],[363,364],[364,365],[365,366],[366,367],[367,368],[368,369],[369,370],[370,371],[371,372],[372,373],[373,374],[374,375],[375,376],[376,377],[377,378],[378,379],[379,380],[380,381],[381,382],[382,383],[383,384],[384,385],[385,386],[386,387],[387,388],[388,389],[389,390],[390,391],[391,392],[392,393],[393,394],[394,395],[395,396],[396,397],[397,398],[398,399],[399,400],[400,401],[401,402],[402,403]]))

    print(test.findMinHeightTrees(505, [[0,1],[0,2],[2,3],[0,4],[1,5],[2,6],[4,7],[5,8],[5,9],[4,10],[5,11],[8,12],[6,13],[9,14],[1,15],[6,16],[14,17],[3,18],[4,19],[14,20],[9,21],[16,22],[6,23],[7,24],[9,25],[13,26],[1,27],[17,28],[25,29],[0,30],[29,31],[19,32],[5,33],[19,34],[16,35],[19,36],[10,37],[29,38],[9,39],[31,40],[1,41],[1,42],[20,43],[10,44],[20,45],[0,46],[26,47],[10,48],[32,49],[21,50],[5,51],[15,52],[17,53],[39,54],[17,55],[38,56],[38,57],[10,58],[2,59],[4,60],[43,61],[7,62],[15,63],[45,64],[30,65],[41,66],[26,67],[19,68],[2,69],[38,70],[58,71],[20,72],[13,73],[45,74],[55,75],[13,76],[35,77],[17,78],[65,79],[38,80],[15,81],[22,82],[66,83],[20,84],[41,85],[78,86],[82,87],[10,88],[53,89],[10,90],[68,91],[24,92],[65,93],[18,94],[4,95],[26,96],[63,97],[0,98],[70,99],[3,100],[48,101],[41,102],[99,103],[56,104],[10,105],[83,106],[96,107],[8,108],[86,109],[55,110],[72,111],[67,112],[42,113],[63,114],[65,115],[107,116],[29,117],[112,118],[36,119],[55,120],[48,121],[106,122],[31,123],[75,124],[95,125],[8,126],[1,127],[72,128],[70,129],[123,130],[109,131],[46,132],[99,133],[107,134],[48,135],[120,136],[61,137],[7,138],[127,139],[72,140],[132,141],[4,142],[81,143],[85,144],[91,145],[25,146],[88,147],[147,148],[97,149],[145,150],[140,151],[83,152],[71,153],[66,154],[86,155],[48,156],[29,157],[142,158],[13,159],[159,160],[31,161],[66,162],[140,163],[128,164],[129,165],[43,166],[103,167],[136,168],[39,169],[42,170],[154,171],[59,172],[86,173],[61,174],[51,175],[15,176],[139,177],[30,178],[130,179],[165,180],[47,181],[54,182],[68,183],[160,184],[71,185],[39,186],[30,187],[107,188],[43,189],[89,190],[85,191],[183,192],[26,193],[193,194],[172,195],[1,196],[43,197],[178,198],[128,199],[4,200],[150,201],[58,202],[93,203],[183,204],[15,205],[98,206],[131,207],[7,208],[138,209],[129,210],[186,211],[47,212],[66,213],[155,214],[123,215],[75,216],[161,217],[123,218],[190,219],[205,220],[166,221],[44,222],[64,223],[78,224],[125,225],[163,226],[28,227],[26,228],[25,229],[115,230],[68,231],[7,232],[140,233],[7,234],[111,235],[164,236],[43,237],[166,238],[227,239],[95,240],[79,241],[26,242],[196,243],[51,244],[17,245],[53,246],[122,247],[136,248],[170,249],[130,250],[99,251],[93,252],[41,253],[199,254],[66,255],[244,256],[187,257],[202,258],[219,259],[158,260],[112,261],[178,262],[191,263],[223,264],[5,265],[191,266],[78,267],[112,268],[179,269],[141,270],[26,271],[76,272],[106,273],[176,274],[137,275],[36,276],[80,277],[20,278],[57,279],[67,280],[116,281],[14,282],[82,283],[279,284],[7,285],[256,286],[204,287],[137,288],[183,289],[241,290],[67,291],[274,292],[213,293],[149,294],[69,295],[150,296],[156,297],[232,298],[239,299],[293,300],[89,301],[282,302],[88,303],[193,304],[21,305],[185,306],[17,307],[171,308],[261,309],[139,310],[233,311],[207,312],[140,313],[37,314],[241,315],[215,316],[94,317],[4,318],[274,319],[309,320],[105,321],[217,322],[13,323],[204,324],[259,325],[57,326],[95,327],[88,328],[140,329],[176,330],[211,331],[190,332],[142,333],[327,334],[268,335],[132,336],[63,337],[222,338],[272,339],[255,340],[194,341],[307,342],[247,343],[234,344],[38,345],[213,346],[196,347],[298,348],[343,349],[133,350],[100,351],[143,352],[46,353],[40,354],[177,355],[110,356],[331,357],[255,358],[222,359],[123,360],[164,361],[137,362],[27,363],[151,364],[363,365],[131,366],[273,367],[279,368],[101,369],[133,370],[284,371],[100,372],[216,373],[21,374],[51,375],[262,376],[26,377],[176,378],[217,379],[75,380],[332,381],[199,382],[230,383],[380,384],[301,385],[312,386],[385,387],[171,388],[26,389],[0,390],[228,391],[1,392],[164,393],[355,394],[200,395],[113,396],[265,397],[17,398],[184,399],[399,400],[38,401],[356,402],[129,403],[102,404],[326,405],[38,406],[326,407],[391,408],[181,409],[322,410],[366,411],[214,412],[244,413],[305,414],[140,415],[352,416],[314,417],[379,418],[81,419],[388,420],[334,421],[168,422],[69,423],[88,424],[327,425],[404,426],[372,427],[427,428],[397,429],[2,430],[322,431],[16,432],[351,433],[335,434],[291,435],[426,436],[429,437],[143,438],[19,439],[91,440],[206,441],[289,442],[237,443],[404,444],[405,445],[79,446],[85,447],[159,448],[130,449],[281,450],[104,451],[408,452],[405,453],[94,454],[317,455],[202,456],[297,457],[232,458],[341,459],[381,460],[21,461],[127,462],[173,463],[301,464],[300,465],[304,466],[73,467],[439,468],[427,469],[305,470],[153,471],[20,472],[210,473],[105,474],[77,475],[180,476],[233,477],[250,478],[38,479],[412,480],[431,481],[196,482],[344,483],[63,484],[308,485],[236,486],[56,487],[107,488],[114,489],[237,490],[476,491],[440,492],[462,493],[457,494],[204,495],[123,496],[119,497],[393,498],[237,499],[157,500],[265,501],[453,502],[32,503],[151,504]]))

main()